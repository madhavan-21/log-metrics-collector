// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: log_protobuf/log_collector.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogReceiverClient is the client API for LogReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogReceiverClient interface {
	ReceiveLogs(ctx context.Context, in *LogBatch, opts ...grpc.CallOption) (*LogResponse, error)
}

type logReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewLogReceiverClient(cc grpc.ClientConnInterface) LogReceiverClient {
	return &logReceiverClient{cc}
}

func (c *logReceiverClient) ReceiveLogs(ctx context.Context, in *LogBatch, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/logcollector.LogReceiver/ReceiveLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogReceiverServer is the server API for LogReceiver service.
// All implementations must embed UnimplementedLogReceiverServer
// for forward compatibility
type LogReceiverServer interface {
	ReceiveLogs(context.Context, *LogBatch) (*LogResponse, error)
	mustEmbedUnimplementedLogReceiverServer()
}

// UnimplementedLogReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedLogReceiverServer struct {
}

func (UnimplementedLogReceiverServer) ReceiveLogs(context.Context, *LogBatch) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveLogs not implemented")
}
func (UnimplementedLogReceiverServer) mustEmbedUnimplementedLogReceiverServer() {}

// UnsafeLogReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogReceiverServer will
// result in compilation errors.
type UnsafeLogReceiverServer interface {
	mustEmbedUnimplementedLogReceiverServer()
}

func RegisterLogReceiverServer(s grpc.ServiceRegistrar, srv LogReceiverServer) {
	s.RegisterService(&LogReceiver_ServiceDesc, srv)
}

func _LogReceiver_ReceiveLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReceiverServer).ReceiveLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcollector.LogReceiver/ReceiveLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReceiverServer).ReceiveLogs(ctx, req.(*LogBatch))
	}
	return interceptor(ctx, in, info, handler)
}

// LogReceiver_ServiceDesc is the grpc.ServiceDesc for LogReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logcollector.LogReceiver",
	HandlerType: (*LogReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveLogs",
			Handler:    _LogReceiver_ReceiveLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_protobuf/log_collector.proto",
}
