// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: protobuf/metrics.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricReceiverClient is the client API for MetricReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricReceiverClient interface {
	ReceiveMetrics(ctx context.Context, in *MetricBatch, opts ...grpc.CallOption) (*ReceiveResponse, error)
}

type metricReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricReceiverClient(cc grpc.ClientConnInterface) MetricReceiverClient {
	return &metricReceiverClient{cc}
}

func (c *metricReceiverClient) ReceiveMetrics(ctx context.Context, in *MetricBatch, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/metrics.MetricReceiver/ReceiveMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricReceiverServer is the server API for MetricReceiver service.
// All implementations must embed UnimplementedMetricReceiverServer
// for forward compatibility
type MetricReceiverServer interface {
	ReceiveMetrics(context.Context, *MetricBatch) (*ReceiveResponse, error)
	mustEmbedUnimplementedMetricReceiverServer()
}

// UnimplementedMetricReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedMetricReceiverServer struct {
}

func (UnimplementedMetricReceiverServer) ReceiveMetrics(context.Context, *MetricBatch) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMetrics not implemented")
}
func (UnimplementedMetricReceiverServer) mustEmbedUnimplementedMetricReceiverServer() {}

// UnsafeMetricReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricReceiverServer will
// result in compilation errors.
type UnsafeMetricReceiverServer interface {
	mustEmbedUnimplementedMetricReceiverServer()
}

func RegisterMetricReceiverServer(s grpc.ServiceRegistrar, srv MetricReceiverServer) {
	s.RegisterService(&MetricReceiver_ServiceDesc, srv)
}

func _MetricReceiver_ReceiveMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricReceiverServer).ReceiveMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.MetricReceiver/ReceiveMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricReceiverServer).ReceiveMetrics(ctx, req.(*MetricBatch))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricReceiver_ServiceDesc is the grpc.ServiceDesc for MetricReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricReceiver",
	HandlerType: (*MetricReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMetrics",
			Handler:    _MetricReceiver_ReceiveMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/metrics.proto",
}
